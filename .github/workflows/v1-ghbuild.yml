# This is a simple workflow that runs the publisher and copies the output to https://<owner>.github.io/<repo>/index.html
# Based on the idea by Carl Leitner
# Change log:
# 2021-06-18: (JCT): publish default branches to / , other branches branches/<branch>
# 2021-11-26: (JCT): Reusable workflow
# 2022-01-28: (JCT): add auto-create gh-pages if it doesn't exist
# 2023-01-22: (JCT): use checkout action v3, and JamesIves/github-pages-deploy-action@v4


# Make sure your repo has a branch called gh-pages

name: CI

# Controls when the action will run. 
on: 
  workflow_call: # Reusable by other workflows
    inputs:
      tx:
        required: false
        type: string
  # This is a called workflow - it should not trigger directly on push/pull_request
  # The main ghbuild.yml wrapper calls this workflow

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tx:
        description: 'Optional Custom terminology server URL'
        required: false

# Prevent concurrent deployments to avoid race conditions when updating gh-pages branch
concurrency:
  group: gh-pages-deployment-${{ github.ref }}
  cancel-in-progress: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      # id-token: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.eventName === 'pull_request' 
              ? context.payload.pull_request.head.ref 
              : context.ref.replace('refs/heads/', '');
            
            // Validate that branch name is not empty
            if (!branchName) {
              console.log('❌ Error: Branch name is empty or could not be determined');
              console.log(`Event: ${context.eventName}`);
              console.log(`GITHUB_REF: ${process.env.GITHUB_REF || '(not set)'}`);
              console.log(`github.head_ref: ${context.payload.pull_request?.head?.ref || '(not set)'}`);
              process.exit(1);
            }
            
            // Sanitize branch name for URLs and file paths
            const sanitizedBranchName = branchName
              .replace(/[^a-zA-Z0-9._-]/g, '-')
              .replace(/--+/g, '-')
              .replace(/^-|-$/g, '');
            
            // Validate that sanitized branch name is not empty
            if (!sanitizedBranchName) {
              console.log('❌ Error: Sanitized branch name is empty after processing');
              console.log(`Original branch name: ${branchName}`);
              process.exit(1);
            }
            
            // Set environment variables for subsequent steps
            core.exportVariable('BRANCH_NAME', branchName);
            core.exportVariable('SANITIZED_BRANCH_NAME', sanitizedBranchName);

      - name: Echo branch name and check if it's the default branch
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            console.log(`🔨 Building branch: ${branchName}`);
            
            // Get default branch using git command
            const { execSync } = require('child_process');
            const defaultBranch = execSync('git remote show origin | sed -n \'/HEAD branch/s/.*: //p\'', { encoding: 'utf8' }).trim();
            console.log(`Default Branch: ${defaultBranch}`);
            
            const isDefaultBranch = branchName === defaultBranch;
            const repoName = context.repo.repo;
            const sanitizedBranchName = process.env.SANITIZED_BRANCH_NAME;
            
            if (isDefaultBranch) {
              console.log('This is the default branch.');
              core.exportVariable('IS_DEFAULT_BRANCH', 'true');
              core.exportVariable('DEPLOY_URL', `https://worldhealthorganization.github.io/${repoName}`);
            } else {
              console.log('This is NOT the default branch.');
              core.exportVariable('IS_DEFAULT_BRANCH', 'false');
              core.exportVariable('DEPLOY_URL', `https://worldhealthorganization.github.io/${repoName}/branches/${sanitizedBranchName}`);
            }

      - name: Create gh-pages branch if it doesn't exist
        run: |
          git fetch origin
          # Check if gh-pages branch exists remotely
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo 'gh-pages branch exists remotely';
          else
            echo 'gh-pages branch does not exist, creating it';
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initializing gh-pages branch"
            git push origin gh-pages
            git checkout $BRANCH_NAME
          fi

      - name: Update the image to the latest publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          # Get the latest publisher - don't run the batch script but run the line directly
          args: curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./input-cache/publisher.jar --create-dirs


      - name: Create package cache folder
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache"

      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p /var/lib/.fhir && chown $(id -u):$(id -g) /var/lib/.fhir"

      - name: Run the IG publisher with optional tx
        uses: actions/github-script@v7
        with:
          script: |
            const txInput = '${{ inputs.tx }}';
            console.log(`TX input: ${txInput}`);

            let cmd = `java -Xmx6g -jar ./input-cache/publisher.jar publisher ` +
                     `-ig . ` +
                     `-auto-ig-build ` +
                     `-repo https://github.com/${process.env.GITHUB_REPOSITORY}/tree/${process.env.GITHUB_REF_NAME} ` +
                     `-package-cache-folder ./fhir-package-cache`;

            if (txInput) {
              cmd += ` -tx ${txInput}`;
            }

            console.log(`Running command: ${cmd}`);
            
            const { execSync } = require('child_process');
            try {
              execSync(`docker run --rm -v ${{ github.workspace }}:/work -w /work hl7fhir/ig-publisher-base:latest sh -c "${cmd}"`, {
                stdio: 'inherit'
              });
            } catch (error) {
              console.error('IG Publisher failed:', error.message);
              process.exit(1);
            }
     
      # Additional step to upload qa.json as an artifact
      - name: Upload qa.json artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: qa-json-artifact
          path: ./output/qa.json  # Adjust the path based on where qa.json is located

      - name: Delete files >100MB before deployment
        run: |
          echo "Removing files over 100 MB from ./output..."
          find ./output -type f -size +100M -print -delete

      - name: Deploy candidate
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'false'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ./output # The folder the action should deploy.
          commit-message: Deploy candidate branch
          target-folder: branches/${{ env.SANITIZED_BRANCH_NAME }}
          single-commit: true
          clean: false 
          force: true 

      - name: Deploy main
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ./output # The folder the action should deploy.
          commit-message: Deploy main branch
          single-commit: true
          clean-exclude: |
            branches
            sitepreview
          force: true
