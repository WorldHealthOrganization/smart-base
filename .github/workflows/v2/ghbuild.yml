# FHIR IG Build-Only Workflow  
# This workflow runs the FHIR IG Publisher and uploads build artifacts
# Based on the idea by Carl Leitner
# Change log:
# 2021-06-18: (JCT): publish default branches to / , other branches branches/<branch>
# 2021-11-26: (JCT): Reusable workflow
# 2022-01-28: (JCT): add auto-create gh-pages if it doesn't exist
# 2023-01-22: (JCT): use checkout action v3, and JamesIves/github-pages-deploy-action@v4
# 2024-XX-XX: (v2): Simplified version - core FHIR IG build only, no DAK features
# 2024-XX-XX: Split into build-only workflow (this) and deploy-only workflow (v2-ghdeploy.yml)

name: Build

# Controls when the action will run. 
on: 
  workflow_call: # Reusable by other workflows
    inputs:
      tx:
        required: false
        type: string
  # This is a called workflow - it should not trigger directly on push/pull_request
  # The main dakbuild.yml wrapper or v2-dakbuild.yml calls this workflow

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tx:
        description: 'Optional Custom terminology server URL'
        required: false

# Prevent concurrent builds to avoid resource conflicts  
concurrency:
  group: fhir-build-${{ github.ref }}
  cancel-in-progress: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.eventName === 'pull_request' 
              ? context.payload.pull_request.head.ref 
              : context.ref.replace('refs/heads/', '');
            
            // Validate that branch name is not empty
            if (!branchName) {
              console.log('‚ùå Error: Branch name is empty or could not be determined');
              console.log('Event: ' + context.eventName);
              console.log('GITHUB_REF: ' + (process.env.GITHUB_REF || '(not set)'));
              console.log('github.head_ref: ' + (context.payload.pull_request?.head?.ref || '(not set)'));
              process.exit(1);
            }
            
            // Sanitize branch name for URLs and file paths
            const sanitizedBranchName = branchName
              .replace(/[^a-zA-Z0-9._-]/g, '-')
              .replace(/--+/g, '-')
              .replace(/^-|-$/g, '');
            
            // Validate that sanitized branch name is not empty
            if (!sanitizedBranchName) {
              console.log('‚ùå Error: Sanitized branch name is empty after processing');
              console.log('Original branch name: ' + branchName);
              process.exit(1);
            }
            
            // Set environment variables for subsequent steps
            core.exportVariable('BRANCH_NAME', branchName);
            core.exportVariable('SANITIZED_BRANCH_NAME', sanitizedBranchName);

      - name: Echo branch name and check if it's the default branch
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            console.log('üî® Building branch: ' + branchName);
            
            // Get default branch using git command
            const { execSync } = require('child_process');
            const defaultBranch = execSync('git remote show origin | sed -n \'/HEAD branch/s/.*: //p\'', { encoding: 'utf8' }).trim();
            console.log('Default Branch: ' + defaultBranch);
            
            const isDefaultBranch = branchName === defaultBranch;
            const repoName = context.repo.repo;
            const sanitizedBranchName = process.env.SANITIZED_BRANCH_NAME;
            
            if (isDefaultBranch) {
              console.log('This is the default branch.');
              core.exportVariable('IS_DEFAULT_BRANCH', 'true');
              core.exportVariable('DEPLOY_URL', 'https://worldhealthorganization.github.io/' + repoName);
            } else {
              console.log('This is NOT the default branch.');
              core.exportVariable('IS_DEFAULT_BRANCH', 'false');
              core.exportVariable('DEPLOY_URL', 'https://worldhealthorganization.github.io/' + repoName + '/branches/' + sanitizedBranchName);
            }

      - name: Comment on PR - Build Started
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            
            const message = 'üöÄ **Build Started** for branch `' + branchName + '`\n\n' +
            '‚è≥ Build in progress... This comment will be updated when complete.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              core.warning('Could not create PR comment. This is normal if permissions are missing. Error: ' + error.message);
            }

      - name: Update the image to the latest publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          # Get the latest publisher - don't run the batch script but run the line directly
          args: curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./input-cache/publisher.jar --create-dirs

      - name: Create package cache folder
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache"

      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p /var/lib/.fhir && chown $(id -u):$(id -g) /var/lib/.fhir"

      - name: Run the IG publisher with optional tx
        uses: actions/github-script@v7
        env:
          TX_INPUT: ${{ inputs.tx }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          script: |
            const txInput = process.env.TX_INPUT;
            console.log('TX input: ' + txInput);

            let cmd = 'java -Xmx6g -jar ./input-cache/publisher.jar publisher ' +
                     '-ig . ' +
                     '-auto-ig-build ' +
                     '-repo https://github.com/' + process.env.GITHUB_REPOSITORY + '/tree/' + process.env.GITHUB_REF_NAME + ' ' +
                     '-package-cache-folder ./fhir-package-cache';

            if (txInput) {
              cmd += ' -tx ' + txInput;
            }

            console.log('Running command: ' + cmd);
            
            const { execSync } = require('child_process');
            try {
              execSync('docker run --rm -v ' + process.env.GITHUB_WORKSPACE + ':/work -w /work hl7fhir/ig-publisher-base:latest sh -c "' + cmd + '"', {
                stdio: 'inherit'
              });
            } catch (error) {
              console.error('IG Publisher failed:', error.message);
              process.exit(1);
            }
     
      # Additional step to upload qa.json as an artifact
      - name: Upload complete build output
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ig-build-output
          path: ./output
          retention-days: 1

      - name: Upload qa.json artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: qa-json-artifact
          path: ./output/qa.json  # Adjust the path based on where qa.json is located

      - name: Comment on PR - Build Complete
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        env:
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const jobStatus = process.env.JOB_STATUS;
            
            let statusIcon, statusText;
            if (jobStatus === 'success') {
              statusIcon = '‚úÖ';
              statusText = 'Successful';
            } else if (jobStatus === 'failure') {
              statusIcon = '‚ùå';
              statusText = 'Failed';
            } else if (jobStatus === 'cancelled') {
              statusIcon = '‚èπÔ∏è';
              statusText = 'Cancelled';
            } else {
              statusIcon = '‚ö†Ô∏è';
              statusText = 'Completed with issues';
            }
            
            const message = statusIcon + ' **Build ' + statusText + '** for branch `' + branchName + '`\n\n' +
            'üîó [View workflow run](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ')';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              core.warning('Could not create PR comment. This is normal if permissions are missing. Error: ' + error.message);
            }