# FHIR IG Deploy-Only Workflow
# This workflow deploys build artifacts to GitHub Pages
# REQUIRES: output/ directory from v2-ghbuild.yml (build-only workflow)
# FAILS: if output/ directory is missing or empty
# Based on the idea by Carl Leitner
# Change log:
# 2024-XX-XX: (v2): Split deploy-only functionality from v2-ghbuild.yml

name: Deploy

# Controls when the action will run. 
on: 
  workflow_call: # Reusable by other workflows
    inputs:
      artifact_name:
        description: 'Name of the build artifact to deploy'
        required: false
        type: string
        default: 'ig-build-output'
  # This is a called workflow - it should not trigger directly on push/pull_request
  # The main dakbuild.yml wrapper or v2-dakbuild.yml calls this workflow

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      artifact_name:
        description: 'Name of the build artifact to deploy'
        required: false
        default: 'ig-build-output'

# Prevent concurrent deployments to avoid race conditions when updating gh-pages branch
concurrency:
  group: gh-pages-deployment-${{ github.ref }}
  cancel-in-progress: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.eventName === 'pull_request' 
              ? context.payload.pull_request.head.ref 
              : context.ref.replace('refs/heads/', '');
            
            // Validate that branch name is not empty
            if (!branchName) {
              console.log('❌ Error: Branch name is empty or could not be determined');
              console.log('Event: ' + context.eventName);
              console.log('GITHUB_REF: ' + (process.env.GITHUB_REF || '(not set)'));
              console.log('github.head_ref: ' + (context.payload.pull_request?.head?.ref || '(not set)'));
              process.exit(1);
            }
            
            // Sanitize branch name for URLs and file paths
            const sanitizedBranchName = branchName
              .replace(/[^a-zA-Z0-9._-]/g, '-')
              .replace(/--+/g, '-')
              .replace(/^-|-$/g, '');
            
            // Validate that sanitized branch name is not empty
            if (!sanitizedBranchName) {
              console.log('❌ Error: Sanitized branch name is empty after processing');
              console.log('Original branch name: ' + branchName);
              process.exit(1);
            }
            
            // Set environment variables for subsequent steps
            core.exportVariable('BRANCH_NAME', branchName);
            core.exportVariable('SANITIZED_BRANCH_NAME', sanitizedBranchName);

      - name: Echo branch name and check if it's the default branch
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            console.log('🚀 Deploying branch: ' + branchName);
            
            // Get default branch using git command
            const { execSync } = require('child_process');
            const defaultBranch = execSync('git remote show origin | sed -n \'/HEAD branch/s/.*: //p\'', { encoding: 'utf8' }).trim();
            console.log('Default Branch: ' + defaultBranch);
            
            const isDefaultBranch = branchName === defaultBranch;
            const repoName = context.repo.repo;
            const sanitizedBranchName = process.env.SANITIZED_BRANCH_NAME;
            
            if (isDefaultBranch) {
              console.log('This is the default branch.');
              core.exportVariable('IS_DEFAULT_BRANCH', 'true');
              core.exportVariable('DEPLOY_URL', 'https://worldhealthorganization.github.io/' + repoName);
            } else {
              console.log('This is NOT the default branch.');
              core.exportVariable('IS_DEFAULT_BRANCH', 'false');
              core.exportVariable('DEPLOY_URL', 'https://worldhealthorganization.github.io/' + repoName + '/branches/' + sanitizedBranchName);
            }

      - name: Comment on PR - Deploy Started
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            
            const message = '🚀 **Deploy Started** for branch `' + branchName + '`\n\n' +
            (isDefault ? '📍 **Main branch deploy** - will deploy to:' : '🌿 **Feature branch deploy** - will deploy to:') + '\n' +
            deployUrl + '\n\n' +
            '⏳ Deploy in progress... This comment will be updated when complete.';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              core.warning('Could not create PR comment. This is normal if permissions are missing. Error: ' + error.message);
            }

      - name: Create gh-pages branch if it doesn't exist
        run: |
          git fetch origin
          # Check if gh-pages branch exists remotely
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo 'gh-pages branch exists remotely';
          else
            echo 'gh-pages branch does not exist, creating it';
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initializing gh-pages branch"
            git push origin gh-pages
            git checkout $BRANCH_NAME
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ./output/

      - name: Validate output directory exists and is populated
        run: |
          echo "Validating that output/ directory exists and contains build artifacts..."
          
          # Check if output directory exists
          if [ ! -d "./output" ]; then
            echo "❌ ERROR: output/ directory not found!"
            echo "The ghdeployonly workflow requires the output/ directory from the ghbuildonly workflow."
            exit 1
          fi
          
          # Check if output directory is not empty
          if [ -z "$(ls -A ./output)" ]; then
            echo "❌ ERROR: output/ directory is empty!"
            echo "The ghdeployonly workflow requires populated output/ directory from the ghbuildonly workflow."
            exit 1
          fi
          
          # List contents for verification
          echo "✅ output/ directory found and contains:"
          ls -la ./output/
          
          # Check for essential files that should be present from FHIR IG build
          essential_files=("index.html")
          missing_files=()
          
          for file in "${essential_files[@]}"; do
            if [ ! -f "./output/$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "⚠️  WARNING: Some expected files are missing from output/:"
            printf "  - %s\n" "${missing_files[@]}"
            echo "This may indicate an incomplete build from the ghbuildonly workflow."
          else
            echo "✅ Essential build files found in output/ directory"
          fi

      - name: Delete files >100MB before deployment
        run: |
          echo "Removing files over 100 MB from ./output..."
          find ./output -type f -size +100M -print -delete

      - name: Deploy candidate
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'false'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ./output # The folder the action should deploy.
          commit-message: Deploy candidate branch
          target-folder: branches/${{ env.SANITIZED_BRANCH_NAME }}
          single-commit: true
          clean: false 
          force: true 

      - name: Deploy main
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ./output # The folder the action should deploy.
          commit-message: Deploy main branch
          single-commit: true
          clean-exclude: |
            branches
            sitepreview
          force: true

      - name: Comment on PR - Deploy Complete
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        env:
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            const jobStatus = process.env.JOB_STATUS;
            
            let statusIcon, statusText, statusColor;
            if (jobStatus === 'success') {
              statusIcon = '✅';
              statusText = 'Successful';
              statusColor = '🟢';
            } else if (jobStatus === 'failure') {
              statusIcon = '❌';
              statusText = 'Failed';
              statusColor = '🔴';
            } else if (jobStatus === 'cancelled') {
              statusIcon = '⏹️';
              statusText = 'Cancelled';
              statusColor = '🟡';
            } else {
              statusIcon = '⚠️';
              statusText = 'Completed with issues';
              statusColor = '🟡';
            }
            
            const message = statusIcon + ' **Deploy ' + statusText + '** for branch `' + branchName + '`\n\n' +
            (jobStatus === 'success' ? 
              statusColor + ' **Deployment successful!** Site is available at: ' + deployUrl :
              statusColor + ' **Deployment ' + statusText.toLowerCase() + '** - please check the workflow logs for details.'
            ) + '\n\n' +
            '🔗 [View workflow run](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ')';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } catch (error) {
              core.warning('Could not create PR comment. This is normal if permissions are missing. Error: ' + error.message);
            }