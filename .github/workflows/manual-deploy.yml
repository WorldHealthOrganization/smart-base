# Manual deployment workflow for copilot/bot commits that require approval
# This workflow allows maintainers to manually deploy builds that were skipped due to being copilot commits

name: Manual Deployment (Approval Required)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        type: string
      is_default_branch:
        description: 'Is this the default branch?'
        required: true
        type: boolean
        default: false
      commit_sha:
        description: 'Commit SHA to deploy (optional, defaults to latest)'
        required: false
        type: string

jobs:
  manual-deploy:
    runs-on: ubuntu-latest
    # Optional: Uncomment the environment section below to require manual approval
    # environment: 
    #   name: manual-deployment-approval
    #   url: ${{ steps.deploy.outputs.page_url }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Validate inputs
        run: |
          echo "Deploying branch: ${{ inputs.branch }}"
          echo "Is default branch: ${{ inputs.is_default_branch }}"
          echo "Commit SHA: ${{ inputs.commit_sha || 'latest' }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_sha || inputs.branch }}

      - name: Set environment variables
        run: |
          echo "BRANCH_NAME=${{ inputs.branch }}" >> $GITHUB_ENV
          if [ "${{ inputs.is_default_branch }}" == "true" ]; then
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
          else
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
          fi

      - name: Update the image to the latest publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          args: curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./input-cache/publisher.jar --create-dirs

      - name: Create package cache folder
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache"

      - name: Transform DMN files to HTML
        run: |
          echo "Transforming DMN files to HTML before IG publisher runs..."
          
          # Check if DMN transformation files exist locally
          if [ ! -f "input/scripts/transform_dmn.py" ] || [ ! -f "input/includes/dmn2html.xslt" ] || [ ! -f "input/includes/dmn.css" ]; then
            echo "DMN transformation files not found locally, downloading from smart-base repository..."
            
            # Create directories if they don't exist
            mkdir -p input/scripts input/includes
            
            # Function to download a file with fallback branches
            download_file() {
              local file_path="$1"
              local output_path="$2"
              
              # Try main branch first
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from main branch"
                return 0
              fi
              
              # Fallback to copilot/fix-24 branch (temporary)
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/copilot/fix-24/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from copilot/fix-24 branch"
                return 0
              fi
              
              echo "Failed to download $file_path from any branch"
              return 1
            }
            
            # Download transformation files from smart-base repository
            download_success=true
            
            if ! download_file "input/scripts/transform_dmn.py" "input/scripts/transform_dmn.py"; then
              download_success=false
            fi
            
            if ! download_file "input/includes/dmn2html.xslt" "input/includes/dmn2html.xslt"; then
              download_success=false
            fi
            
            if ! download_file "input/includes/dmn.css" "input/includes/dmn.css"; then
              download_success=false
            fi
            
            if [ "$download_success" = true ]; then
              echo "Successfully downloaded all DMN transformation files"
            else
              echo "Failed to download some DMN transformation files"
            fi
          else
            echo "Using local DMN transformation files"
          fi
          
          # Install required Python dependencies for DMN transformation
          pip install lxml
          
          # Run DMN transformation if script is available
          if [ -f "input/scripts/transform_dmn.py" ]; then
            python3 input/scripts/transform_dmn.py
          else
            echo "DMN transformation script not available, skipping DMN transformation"
          fi

      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p /var/lib/.fhir && chown $(id -u):$(id -g) /var/lib/.fhir"

      - name: Run the IG publisher
        run: |
          CMD="java -Xmx6g -jar ./input-cache/publisher.jar publisher \
            -ig . \
            -auto-ig-build \
            -repo https://github.com/${GITHUB_REPOSITORY}/tree/${{ inputs.branch }} \
            -package-cache-folder ./fhir-package-cache"

          echo "Running command: $CMD"
          
          docker run --rm \
            -v ${{ github.workspace }}:/work \
            -w /work \
            hl7fhir/ig-publisher-base:latest \
            sh -c "$CMD"

      - name: Generate ValueSet JSON Schemas
        run: |
          echo "Generating ValueSet schemas from expansions.json..."
          if [ -f "./output/expansions.json" ]; then
            # Check if script exists locally first
            if [ -f "./input/scripts/generate_valueset_schemas.py" ]; then
              echo "Using local ValueSet schema generator..."
              python3 input/scripts/generate_valueset_schemas.py
            else
              echo "Downloading ValueSet schema generator..."
              mkdir -p ./input/scripts
              curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_valueset_schemas.py \
                -o ./input/scripts/generate_valueset_schemas.py
              if [ -f "./input/scripts/generate_valueset_schemas.py" ]; then
                python3 input/scripts/generate_valueset_schemas.py
                echo "✅ ValueSet schemas generated successfully"
              else
                echo "⚠️  Failed to download schema generator, skipping"
              fi
            fi
          else
            echo "⚠️  expansions.json not found, skipping schema generation"
          fi

      - name: Generate Logical Model JSON Schemas
        run: |
          echo "Generating Logical Model schemas from StructureDefinition JSON files..."
          # Check if script exists locally first
          if [ -f "./input/scripts/generate_logical_model_schemas.py" ]; then
            echo "Using local Logical Model schema generator..."
            python3 input/scripts/generate_logical_model_schemas.py output output
            echo "✅ Logical Model schemas generated successfully"
          else
            echo "Downloading Logical Model schema generator..."
            mkdir -p ./input/scripts
            curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_logical_model_schemas.py \
              -o ./input/scripts/generate_logical_model_schemas.py
            if [ -f "./input/scripts/generate_logical_model_schemas.py" ]; then
              python3 input/scripts/generate_logical_model_schemas.py output output
              echo "✅ Logical Model schemas generated successfully"
            else
              echo "⚠️  Failed to download Logical Model schema generator, skipping"
            fi
          fi

      - name: Generate DAK API Documentation Hub
        run: |
          echo "Generating DAK API Documentation Hub..."
          # Install required Python dependencies
          pip install pyyaml
          
          # Check if script exists locally first
          if [ -f "./input/scripts/generate_dak_api_hub.py" ]; then
            echo "Using local DAK API hub generator..."
            python3 input/scripts/generate_dak_api_hub.py output input/images/openapi
            echo "✅ DAK API hub generated successfully"
          else
            echo "Downloading DAK API hub generator..."
            mkdir -p ./input/scripts
            curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_dak_api_hub.py \
              -o ./input/scripts/generate_dak_api_hub.py
            if [ -f "./input/scripts/generate_dak_api_hub.py" ]; then
              python3 input/scripts/generate_dak_api_hub.py output input/images/openapi
              echo "✅ DAK API hub generated successfully"
            else
              echo "⚠️  Failed to download DAK API hub generator, skipping"
            fi
          fi

      - name: Delete files >100MB before deployment
        run: |
          echo "Removing files over 100 MB from ./output..."
          find ./output -type f -size +100M -print -delete

      - name: Deploy to candidate branch
        id: deploy
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'false'
        with:
          branch: gh-pages
          folder: ./output
          commit-message: "Manual deployment of candidate branch ${{ inputs.branch }} (approved)"
          target-folder: branches/${{ env.BRANCH_NAME }}
          single-commit: true
          clean: false

      - name: Deploy to main
        id: deploy-main
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'true'
        with:
          branch: gh-pages
          folder: ./output
          commit-message: "Manual deployment of main branch (approved)"
          single-commit: true
          clean-exclude: |
            branches
            sitepreview

      - name: Deployment summary
        run: |
          echo "✅ Manual deployment completed successfully!"
          echo "📁 Branch: ${{ inputs.branch }}"
          echo "🌐 Deployment type: ${{ env.IS_DEFAULT_BRANCH == 'true' && 'Main branch' || 'Candidate branch' }}"
          if [ "${{ env.IS_DEFAULT_BRANCH }}" == "false" ]; then
            echo "🔗 Preview URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branches/${{ inputs.branch }}/"
          else
            echo "🔗 Main site URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          fi