# This is a simple workflow that runs the publisher and copies the output to https://<owner>.github.io/<repo>/index.html
# Based on the idea by Carl Leitner
# Change log:
# 2021-06-18: (JCT): publish default branches to / , other branches branches/<branch>
# 2021-11-26: (JCT): Reusable workflow
# 2022-01-28: (JCT): add auto-create gh-pages if it doesn't exist
# 2023-01-22: (JCT): use checkout action v3, and JamesIves/github-pages-deploy-action@v4


# Make sure your repo has a branch called gh-pages

name: CI

# Controls when the action will run. 
on: 
  workflow_call: # Reusable by other workflows
    inputs:
      tx:
        required: false
        type: string
  # Triggers the workflow on push or pull request events for any branch
  push:
    branches-ignore:    
      - 'gh-pages'
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tx:
        description: 'Optional Custom terminology server URL'
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Echo branch name and check if it's the default branch
        run: |
          echo "üî® Building branch: $BRANCH_NAME"
          DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          echo "Default Branch: $DEFAULT_BRANCH"
          if [ "$BRANCH_NAME" == "$DEFAULT_BRANCH" ]; then
            echo "This is the default branch."
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://worldhealthorganization.github.io/smart-base" >> $GITHUB_ENV
          else
            echo "This is NOT the default branch."
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://worldhealthorganization.github.io/smart-base/branches/$BRANCH_NAME" >> $GITHUB_ENV
          fi

      - name: Comment on PR - Build Started
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            
            const message = `üöÄ **Build Started** for branch \`${branchName}\`
            
            ${isDefault ? 'üìç **Main branch build** - will deploy to:' : 'üåø **Feature branch build** - will deploy to:'}
            ${deployUrl}
            
            ‚è≥ Build in progress... This comment will be updated when complete.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });


      - name: Create gh-pages branch if it doesn't exist
        run: |
          git fetch origin
          # Check if gh-pages branch exists remotely
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo 'gh-pages branch exists remotely';
          else
            echo 'gh-pages branch does not exist, creating it';
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initializing gh-pages branch"
            git push origin gh-pages
            git checkout ${GITHUB_REF##*/}
          fi

      - name: Update the image to the latest publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          # Get the latest publisher - don't run the batch script but run the line directly
          args: curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./input-cache/publisher.jar --create-dirs


      - name: Create package cache folder
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache"

      - name: Transform DMN files to HTML
        run: |
          echo "Transforming DMN files to HTML before IG publisher runs..."
          
          # Check if DMN transformation files exist locally
          if [ ! -f "input/scripts/transform_dmn.py" ] || [ ! -f "input/includes/dmn2html.xslt" ] || [ ! -f "input/includes/dmn.css" ]; then
            echo "DMN transformation files not found locally, downloading from smart-base repository..."
            
            # Create directories if they don't exist
            mkdir -p input/scripts input/includes
            
            # Function to download a file with fallback branches
            download_file() {
              local file_path="$1"
              local output_path="$2"
              
              # Try main branch first
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from main branch"
                return 0
              fi
              
              # Fallback to copilot/fix-24 branch (temporary)
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/copilot/fix-24/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from copilot/fix-24 branch"
                return 0
              fi
              
              echo "Failed to download $file_path from any branch"
              return 1
            }
            
            # Download transformation files from smart-base repository
            download_success=true
            
            if ! download_file "input/scripts/transform_dmn.py" "input/scripts/transform_dmn.py"; then
              download_success=false
            fi
            
            if ! download_file "input/includes/dmn2html.xslt" "input/includes/dmn2html.xslt"; then
              download_success=false
            fi
            
            if ! download_file "input/includes/dmn.css" "input/includes/dmn.css"; then
              download_success=false
            fi
            
            if [ "$download_success" = true ]; then
              echo "Successfully downloaded all DMN transformation files"
            else
              echo "Failed to download some DMN transformation files"
            fi
          else
            echo "Using local DMN transformation files"
          fi
          
          # Install required Python dependencies for DMN transformation
          pip install lxml
          
          # Run DMN transformation if script is available
          if [ -f "input/scripts/transform_dmn.py" ]; then
            python3 input/scripts/transform_dmn.py
          else
            echo "DMN transformation script not available, skipping DMN transformation"
          fi


      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p /var/lib/.fhir && chown $(id -u):$(id -g) /var/lib/.fhir"

      - name: Run the IG publisher with optional tx
        run: |
          echo "TX input: ${{ inputs.tx }}"

          CMD="java -Xmx6g -jar ./input-cache/publisher.jar publisher \
            -ig . \
            -auto-ig-build \
            -repo https://github.com/${GITHUB_REPOSITORY}/tree/${GITHUB_REF_NAME} \
            -package-cache-folder ./fhir-package-cache"

          if [ ! -z "${{ inputs.tx }}" ]; then
            CMD="$CMD -tx ${{ inputs.tx }}"
          fi

          echo "Running command: $CMD"
          
          docker run --rm \
            -v ${{ github.workspace }}:/work \
            -w /work \
            hl7fhir/ig-publisher-base:latest \
            sh -c "$CMD"

      - name: Generate ValueSet JSON Schemas
        run: |
          echo "Generating ValueSet schemas from expansions.json..."
          if [ -f "./output/expansions.json" ]; then
            # Check if script exists locally first
            if [ -f "./input/scripts/generate_valueset_schemas.py" ]; then
              echo "Using local ValueSet schema generator..."
              python3 input/scripts/generate_valueset_schemas.py
            else
              echo "Downloading ValueSet schema generator..."
              mkdir -p ./input/scripts
              curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_valueset_schemas.py \
                -o ./input/scripts/generate_valueset_schemas.py
              if [ -f "./input/scripts/generate_valueset_schemas.py" ]; then
                python3 input/scripts/generate_valueset_schemas.py
                echo "‚úÖ ValueSet schemas generated successfully"
              else
                echo "‚ö†Ô∏è  Failed to download schema generator, skipping"
              fi
            fi
          else
            echo "‚ö†Ô∏è  expansions.json not found, skipping schema generation"
          fi

      - name: Generate Logical Model JSON Schemas
        run: |
          echo "Generating Logical Model schemas from StructureDefinition JSON files..."
          # Check if script exists locally first
          if [ -f "./input/scripts/generate_logical_model_schemas.py" ]; then
            echo "Using local Logical Model schema generator..."
            python3 input/scripts/generate_logical_model_schemas.py output output
            echo "‚úÖ Logical Model schemas generated successfully"
          else
            echo "Downloading Logical Model schema generator..."
            mkdir -p ./input/scripts
            curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_logical_model_schemas.py \
              -o ./input/scripts/generate_logical_model_schemas.py
            if [ -f "./input/scripts/generate_logical_model_schemas.py" ]; then
              python3 input/scripts/generate_logical_model_schemas.py output output
              echo "‚úÖ Logical Model schemas generated successfully"
            else
              echo "‚ö†Ô∏è  Failed to download Logical Model schema generator, skipping"
            fi
          fi

      - name: Generate DAK API Documentation Hub
        run: |
          echo "Generating DAK API Documentation Hub..."
          # Install required Python dependencies
          pip install pyyaml
          
          # Check if script exists locally first
          if [ -f "./input/scripts/generate_dak_api_hub.py" ]; then
            echo "Using local DAK API hub generator..."
            python3 input/scripts/generate_dak_api_hub.py output input/images/openapi
            echo "‚úÖ DAK API hub generated successfully"
          else
            echo "Downloading DAK API hub generator..."
            mkdir -p ./input/scripts
            curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_dak_api_hub.py \
              -o ./input/scripts/generate_dak_api_hub.py
            if [ -f "./input/scripts/generate_dak_api_hub.py" ]; then
              python3 input/scripts/generate_dak_api_hub.py output input/images/openapi
              echo "‚úÖ DAK API hub generated successfully"
            else
              echo "‚ö†Ô∏è  Failed to download DAK API hub generator, skipping"
            fi
          fi
     
      # Additional step to upload qa.json as an artifact
      - name: Upload qa.json artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: qa-json-artifact
          path: ./output/qa.json  # Adjust the path based on where qa.json is located

      - name: Delete files >100MB before deployment
        run: |
          echo "Removing files over 100 MB from ./output..."
          find ./output -type f -size +100M -print -delete

      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: env.IS_DEFAULT_BRANCH == 'true'

      - name: Upload Pages artifact for main branch
        uses: actions/upload-pages-artifact@v3
        if: env.IS_DEFAULT_BRANCH == 'true'
        with:
          path: ./output

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: env.IS_DEFAULT_BRANCH == 'true'

      - name: Deploy candidate branch to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'false'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: ./output
          commit-message: Deploy candidate branch
          target-folder: branches/${{ env.BRANCH_NAME }}
          single-commit: true
          clean: false

      - name: Comment on PR - Build Complete
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            const jobStatus = '${{ job.status }}';
            
            let statusIcon, statusText, statusColor;
            if (jobStatus === 'success') {
              statusIcon = '‚úÖ';
              statusText = 'Successful';
              statusColor = 'üü¢';
            } else if (jobStatus === 'failure') {
              statusIcon = '‚ùå';
              statusText = 'Failed';
              statusColor = 'üî¥';
            } else if (jobStatus === 'cancelled') {
              statusIcon = '‚èπÔ∏è';
              statusText = 'Cancelled';
              statusColor = 'üü°';
            } else {
              statusIcon = '‚ö†Ô∏è';
              statusText = 'Completed with issues';
              statusColor = 'üü°';
            }
            
            const message = `${statusIcon} **Build ${statusText}** for branch \`${branchName}\`
            
            ${jobStatus === 'success' ? 
              `${statusColor} **Deployment successful!** Site is available at: ${deployUrl}` :
              `${statusColor} **Deployment ${statusText.toLowerCase()}** - please check the workflow logs for details.`
            }
            
            üîó [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
