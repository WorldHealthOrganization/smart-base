# This is a simple workflow that runs the publisher and copies the output to https://<owner>.github.io/<repo>/index.html
# Based on the idea by Carl Leitner
# Change log:
# 2021-06-18: (JCT): publish default branches to / , other branches branches/<branch>
# 2021-11-26: (JCT): Reusable workflow
# 2022-01-28: (JCT): add auto-create gh-pages if it doesn't exist
# 2023-01-22: (JCT): use checkout action v3, and JamesIves/github-pages-deploy-action@v4


# Make sure your repo has a branch called gh-pages

name: CI

# Controls when the action will run. 
on: 
  workflow_call: # Reusable by other workflows
    inputs:
      tx:
        required: false
        type: string
  # Triggers the workflow on push or pull request events for any branch
  push:
    branches-ignore:    
      - 'gh-pages'
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tx:
        description: 'Optional Custom terminology server URL'
        required: false
      generate_dmn_questionnaires:
        description: 'Generate DMN Questionnaires (default: enabled for WHO repos, disabled for others)'
        required: false
        type: boolean
      transform_dmn_files:
        description: 'Transform DMN files to HTML (default: enabled for WHO repos, disabled for others)'
        required: false
        type: boolean
      generate_valueset_schemas:
        description: 'Generate ValueSet JSON Schemas (default: enabled for WHO repos, disabled for others)'
        required: false
        type: boolean
      generate_logical_model_schemas:
        description: 'Generate Logical Model JSON Schemas (default: enabled for WHO repos, disabled for others)'
        required: false
        type: boolean
      generate_dak_api_hub:
        description: 'Generate DAK API Documentation Hub (default: enabled for WHO repos, disabled for others)'
        required: false
        type: boolean
      generate_jsonld_vocabularies:
        description: 'Generate JSON-LD Vocabularies from ValueSet expansions (default: enabled for WHO repos, disabled for others)'
        required: false
        type: boolean

# Prevent concurrent deployments to avoid race conditions when updating gh-pages branch
concurrency:
  group: github-pages-deployment
  cancel-in-progress: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      # id-token: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${GITHUB_REF##*/}"
          fi
          
          # Validate that branch name is not empty
          if [ -z "$BRANCH_NAME" ]; then
            echo "❌ Error: Branch name is empty or could not be determined"
            echo "Event: ${{ github.event_name }}"
            echo "GITHUB_REF: ${GITHUB_REF:-'(not set)'}"
            echo "github.head_ref: ${{ github.head_ref }}"
            exit 1
          fi
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          # Sanitize branch name for URLs and file paths
          SANITIZED_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          # Validate that sanitized branch name is not empty
          if [ -z "$SANITIZED_BRANCH_NAME" ]; then
            echo "❌ Error: Sanitized branch name is empty after processing"
            echo "Original branch name: $BRANCH_NAME"
            exit 1
          fi
          
          echo "SANITIZED_BRANCH_NAME=$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV

      - name: Echo branch name and check if it's the default branch
        run: |
          echo "🔨 Building branch: $BRANCH_NAME"
          DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          echo "Default Branch: $DEFAULT_BRANCH"
          if [ "$BRANCH_NAME" == "$DEFAULT_BRANCH" ]; then
            echo "This is the default branch."
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://worldhealthorganization.github.io/${{ github.event.repository.name }}" >> $GITHUB_ENV
          else
            echo "This is NOT the default branch."
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://worldhealthorganization.github.io/${{ github.event.repository.name }}/branches/$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV
          fi

      - name: Set feature defaults based on repository owner
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          TRIGGER_TYPE="${{ github.event_name }}"
          echo "Repository owner: $REPO_OWNER"
          echo "Trigger type: $TRIGGER_TYPE"
          
          # Set defaults based on repository owner (enabled for WHO, disabled for others)
          if [ "$REPO_OWNER" == "WorldHealthOrganization" ]; then
            echo "WHO repository detected - enabling features by default"
            DEFAULT_ENABLE="true"
          else
            echo "Non-WHO repository detected - disabling features by default"
            DEFAULT_ENABLE="false"
          fi
          
          echo "Default feature setting: $DEFAULT_ENABLE"
          
          # Normalize input handling for different trigger types
          # Function to normalize boolean values
          normalize_boolean() {
            local input_value="$1"
            local default_value="$2"
            
            # For automatic triggers (push/pull_request), inputs are empty
            if [ "$TRIGGER_TYPE" != "workflow_dispatch" ]; then
              echo "$default_value"
              return
            fi
            
            # For manual triggers, handle explicit boolean values
            case "$input_value" in
              "true")  echo "true" ;;
              "false") echo "false" ;;
              "")      echo "$default_value" ;;
              *)       echo "$default_value" ;;
            esac
          }
          
          # Get raw input values
          RAW_DMN_QUESTIONNAIRES="${{ inputs.generate_dmn_questionnaires }}"
          RAW_TRANSFORM_DMN="${{ inputs.transform_dmn_files }}"
          RAW_VALUESET_SCHEMAS="${{ inputs.generate_valueset_schemas }}"
          RAW_LOGICAL_MODEL_SCHEMAS="${{ inputs.generate_logical_model_schemas }}"
          RAW_DAK_API_HUB="${{ inputs.generate_dak_api_hub }}"
          RAW_JSONLD_VOCABULARIES="${{ inputs.generate_jsonld_vocabularies }}"
          
          echo "Raw input values (trigger: $TRIGGER_TYPE):"
          echo "  generate_dmn_questionnaires: '$RAW_DMN_QUESTIONNAIRES'"
          echo "  transform_dmn_files: '$RAW_TRANSFORM_DMN'"
          echo "  generate_valueset_schemas: '$RAW_VALUESET_SCHEMAS'"
          echo "  generate_logical_model_schemas: '$RAW_LOGICAL_MODEL_SCHEMAS'"
          echo "  generate_dak_api_hub: '$RAW_DAK_API_HUB'"
          echo "  generate_jsonld_vocabularies: '$RAW_JSONLD_VOCABULARIES'"
          
          # Normalize all values
          ENABLE_DMN_QUESTIONNAIRES=$(normalize_boolean "$RAW_DMN_QUESTIONNAIRES" "$DEFAULT_ENABLE")
          ENABLE_TRANSFORM_DMN=$(normalize_boolean "$RAW_TRANSFORM_DMN" "$DEFAULT_ENABLE")
          ENABLE_VALUESET_SCHEMAS=$(normalize_boolean "$RAW_VALUESET_SCHEMAS" "$DEFAULT_ENABLE")
          ENABLE_LOGICAL_MODEL_SCHEMAS=$(normalize_boolean "$RAW_LOGICAL_MODEL_SCHEMAS" "$DEFAULT_ENABLE")
          ENABLE_DAK_API_HUB=$(normalize_boolean "$RAW_DAK_API_HUB" "$DEFAULT_ENABLE")
          ENABLE_JSONLD_VOCABULARIES=$(normalize_boolean "$RAW_JSONLD_VOCABULARIES" "$DEFAULT_ENABLE")
          
          echo "ENABLE_DMN_QUESTIONNAIRES=$ENABLE_DMN_QUESTIONNAIRES" >> $GITHUB_ENV
          echo "ENABLE_TRANSFORM_DMN=$ENABLE_TRANSFORM_DMN" >> $GITHUB_ENV
          echo "ENABLE_VALUESET_SCHEMAS=$ENABLE_VALUESET_SCHEMAS" >> $GITHUB_ENV
          echo "ENABLE_LOGICAL_MODEL_SCHEMAS=$ENABLE_LOGICAL_MODEL_SCHEMAS" >> $GITHUB_ENV
          echo "ENABLE_DAK_API_HUB=$ENABLE_DAK_API_HUB" >> $GITHUB_ENV
          echo "ENABLE_JSONLD_VOCABULARIES=$ENABLE_JSONLD_VOCABULARIES" >> $GITHUB_ENV
          
          # Initialize tracking variables for schema generation
          echo "VALUESET_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
          echo "LOGICAL_MODEL_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
          echo "JSONLD_VOCABULARIES_GENERATED=false" >> $GITHUB_ENV
          
          echo "Final feature settings:"
          echo "  Generate DMN Questionnaires: $ENABLE_DMN_QUESTIONNAIRES (condition: env.ENABLE_DMN_QUESTIONNAIRES == 'true')"
          echo "  Transform DMN files: $ENABLE_TRANSFORM_DMN (condition: env.ENABLE_TRANSFORM_DMN == 'true')"
          echo "  Generate ValueSet schemas: $ENABLE_VALUESET_SCHEMAS (condition: env.ENABLE_VALUESET_SCHEMAS == 'true')"
          echo "  Generate Logical Model schemas: $ENABLE_LOGICAL_MODEL_SCHEMAS (condition: env.ENABLE_LOGICAL_MODEL_SCHEMAS == 'true')"
          echo "  Generate DAK API hub: $ENABLE_DAK_API_HUB (condition: env.ENABLE_DAK_API_HUB == 'true')"
          echo "  Generate JSON-LD vocabularies: $ENABLE_JSONLD_VOCABULARIES (condition: env.ENABLE_JSONLD_VOCABULARIES == 'true')"
          
          # Additional debugging - show what conditions will evaluate to
          echo "Step condition evaluations:"
          if [ "$ENABLE_DMN_QUESTIONNAIRES" == "true" ]; then
            echo "  ✅ DMN Questionnaires step WILL run"
          else
            echo "  ❌ DMN Questionnaires step will NOT run (value: '$ENABLE_DMN_QUESTIONNAIRES')"
          fi
          if [ "$ENABLE_TRANSFORM_DMN" == "true" ]; then
            echo "  ✅ Transform DMN step WILL run"
          else
            echo "  ❌ Transform DMN step will NOT run (value: '$ENABLE_TRANSFORM_DMN')"
          fi
          if [ "$ENABLE_VALUESET_SCHEMAS" == "true" ]; then
            echo "  ✅ ValueSet schemas step WILL run"
          else
            echo "  ❌ ValueSet schemas step will NOT run (value: '$ENABLE_VALUESET_SCHEMAS')"
          fi
          if [ "$ENABLE_LOGICAL_MODEL_SCHEMAS" == "true" ]; then
            echo "  ✅ Logical Model schemas step WILL run"
          else
            echo "  ❌ Logical Model schemas step will NOT run (value: '$ENABLE_LOGICAL_MODEL_SCHEMAS')"
          fi
          if [ "$ENABLE_DAK_API_HUB" == "true" ]; then
            echo "  ✅ DAK API hub step WILL run"
          else
            echo "  ❌ DAK API hub step will NOT run (value: '$ENABLE_DAK_API_HUB')"
          fi
          if [ "$ENABLE_JSONLD_VOCABULARIES" == "true" ]; then
            echo "  ✅ JSON-LD vocabularies step WILL run"
          else
            echo "  ❌ JSON-LD vocabularies step will NOT run (value: '$ENABLE_JSONLD_VOCABULARIES')"
          fi

      - name: Comment on PR - Build Started
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            
            const message = `🚀 **Build Started** for branch \`${branchName}\`
            
            ${isDefault ? '📍 **Main branch build** - will deploy to:' : '🌿 **Feature branch build** - will deploy to:'}
            ${deployUrl}
            
            ⏳ Build in progress... This comment will be updated when complete.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });


      - name: Create gh-pages branch if it doesn't exist
        run: |
          git fetch origin
          # Check if gh-pages branch exists remotely
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo 'gh-pages branch exists remotely';
          else
            echo 'gh-pages branch does not exist, creating it';
            git checkout --orphan gh-pages
            git reset --hard
            git commit --allow-empty -m "Initializing gh-pages branch"
            git push origin gh-pages
            git checkout $BRANCH_NAME
          fi

      - name: Update the image to the latest publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          # Get the latest publisher - don't run the batch script but run the line directly
          args: curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o ./input-cache/publisher.jar --create-dirs


      - name: Create package cache folder
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p ./fhir-package-cache && chown 1001:127 ./fhir-package-cache"

      - name: Generate DMN Questionnaires
        if: env.ENABLE_DMN_QUESTIONNAIRES == 'true'
        run: |
          echo "Generating FHIR Questionnaires from DMN files before IG publisher runs..."
          
          # Check if questionnaire generation files exist locally
          if [ ! -f "input/scripts/dmn_questionnaire_generator.py" ]; then
            echo "DMN questionnaire generator not found locally, downloading from smart-base repository..."
            
            # Create directories if they don't exist
            mkdir -p input/scripts
            
            # Function to download a file with fallback branches
            download_file() {
              local file_path="$1"
              local output_path="$2"
              
              # Try main branch first
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from main branch"
                return 0
              fi
              
              # Fallback to current branch (for testing)
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/$BRANCH_NAME/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from $BRANCH_NAME branch"
                return 0
              fi
              
              echo "Failed to download $file_path from any branch"
              return 1
            }
            
            # Download questionnaire generator from smart-base repository
            if ! download_file "input/scripts/dmn_questionnaire_generator.py" "input/scripts/dmn_questionnaire_generator.py"; then
              echo "Failed to download questionnaire generator, skipping questionnaire generation"
            fi
          else
            echo "Using local DMN questionnaire generator"
          fi
          
          # Install required Python dependencies for questionnaire generation
          pip install lxml
          
          # Run questionnaire generation if script is available
          if [ -f "input/scripts/dmn_questionnaire_generator.py" ]; then
            python3 input/scripts/dmn_questionnaire_generator.py
            echo "✅ Questionnaires generated successfully"
          else
            echo "⚠️ DMN questionnaire generator not available, skipping questionnaire generation"
          fi

      - name: Transform DMN files to HTML
        if: env.ENABLE_TRANSFORM_DMN == 'true'
        run: |
          echo "Transforming DMN files to HTML before IG publisher runs..."
          
          # Check if DMN transformation files exist locally
          if [ ! -f "input/scripts/transform_dmn.py" ] || [ ! -f "input/includes/dmn2html.xslt" ] || [ ! -f "input/includes/dmn.css" ]; then
            echo "DMN transformation files not found locally, downloading from smart-base repository..."
            
            # Create directories if they don't exist
            mkdir -p input/scripts input/includes
            
            # Function to download a file with fallback branches
            download_file() {
              local file_path="$1"
              local output_path="$2"
              
              # Try main branch first
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from main branch"
                return 0
              fi
              
              # Fallback to copilot/fix-24 branch (temporary)
              if curl -L -f -o "$output_path" "https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/copilot/fix-24/$file_path" 2>/dev/null; then
                echo "Downloaded $file_path from copilot/fix-24 branch"
                return 0
              fi
              
              echo "Failed to download $file_path from any branch"
              return 1
            }
            
            # Download transformation files from smart-base repository
            download_success=true
            
            if ! download_file "input/scripts/transform_dmn.py" "input/scripts/transform_dmn.py"; then
              download_success=false
            fi
            
            if ! download_file "input/includes/dmn2html.xslt" "input/includes/dmn2html.xslt"; then
              download_success=false
            fi
            
            if ! download_file "input/includes/dmn.css" "input/includes/dmn.css"; then
              download_success=false
            fi
            
            if [ "$download_success" = true ]; then
              echo "Successfully downloaded all DMN transformation files"
            else
              echo "Failed to download some DMN transformation files"
            fi
          else
            echo "Using local DMN transformation files"
          fi
          
          # Install required Python dependencies for DMN transformation
          pip install lxml
          
          # Run DMN transformation if script is available
          if [ -f "input/scripts/transform_dmn.py" ]; then
            python3 input/scripts/transform_dmn.py
          else
            echo "DMN transformation script not available, skipping DMN transformation"
          fi


      - name: Run the IG publisher
        uses: docker://hl7fhir/ig-publisher-base:latest
        with:
          entrypoint: /bin/sh
          args: -c "mkdir -p /var/lib/.fhir && chown $(id -u):$(id -g) /var/lib/.fhir"

      - name: Initialize schema generation tracking
        run: |
          echo "VALUESET_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
          echo "LOGICAL_MODEL_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
          echo "JSONLD_VOCABULARIES_GENERATED=false" >> $GITHUB_ENV

      - name: Run the IG publisher with optional tx
        run: |
          echo "TX input: ${{ inputs.tx }}"

          CMD="java -Xmx6g -jar ./input-cache/publisher.jar publisher \
            -ig . \
            -auto-ig-build \
            -repo https://github.com/${GITHUB_REPOSITORY}/tree/${GITHUB_REF_NAME} \
            -package-cache-folder ./fhir-package-cache"

          if [ ! -z "${{ inputs.tx }}" ]; then
            CMD="$CMD -tx ${{ inputs.tx }}"
          fi

          echo "Running command: $CMD"
          
          docker run --rm \
            -v ${{ github.workspace }}:/work \
            -w /work \
            hl7fhir/ig-publisher-base:latest \
            sh -c "$CMD"

      - name: Generate ValueSet JSON Schemas (after IG publisher)
        if: env.ENABLE_VALUESET_SCHEMAS == 'true' && env.VALUESET_SCHEMAS_GENERATED != 'true'
        run: |
          echo "Generating ValueSet schemas from expansions.json after IG publisher..."
          if [ -f "./output/expansions.json" ]; then
            # Check if script exists locally first
            if [ -f "./input/scripts/generate_valueset_schemas.py" ]; then
              echo "Using local ValueSet schema generator..."
              python3 input/scripts/generate_valueset_schemas.py
              echo "VALUESET_SCHEMAS_GENERATED=true" >> $GITHUB_ENV
            else
              echo "Downloading ValueSet schema generator..."
              mkdir -p ./input/scripts
              curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_valueset_schemas.py \
                -o ./input/scripts/generate_valueset_schemas.py
              if [ -f "./input/scripts/generate_valueset_schemas.py" ]; then
                python3 input/scripts/generate_valueset_schemas.py
                echo "✅ ValueSet schemas generated successfully"
                echo "VALUESET_SCHEMAS_GENERATED=true" >> $GITHUB_ENV
              else
                echo "⚠️  Failed to download schema generator, skipping"
                echo "VALUESET_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
              fi
            fi
          else
            echo "⚠️  expansions.json not found, skipping schema generation"
            echo "VALUESET_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
          fi

      - name: Generate JSON-LD Vocabularies (after IG publisher)
        if: env.ENABLE_JSONLD_VOCABULARIES == 'true' && env.JSONLD_VOCABULARIES_GENERATED != 'true'
        run: |
          echo "Generating JSON-LD vocabularies from expansions.json after IG publisher..."
          if [ -f "./output/expansions.json" ]; then
            # Check if script exists locally first
            if [ -f "./input/scripts/generate_jsonld_vocabularies.py" ]; then
              echo "Using local JSON-LD vocabulary generator..."
              python3 input/scripts/generate_jsonld_vocabularies.py
              echo "JSONLD_VOCABULARIES_GENERATED=true" >> $GITHUB_ENV
            else
              echo "Downloading JSON-LD vocabulary generator..."
              mkdir -p ./input/scripts
              curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_jsonld_vocabularies.py \
                -o ./input/scripts/generate_jsonld_vocabularies.py
              if [ -f "./input/scripts/generate_jsonld_vocabularies.py" ]; then
                python3 input/scripts/generate_jsonld_vocabularies.py
                echo "✅ JSON-LD vocabularies generated successfully"
                echo "JSONLD_VOCABULARIES_GENERATED=true" >> $GITHUB_ENV
              else
                echo "⚠️  Failed to download JSON-LD vocabulary generator, skipping"
                echo "JSONLD_VOCABULARIES_GENERATED=false" >> $GITHUB_ENV
              fi
            fi
          else
            echo "⚠️  expansions.json not found, skipping JSON-LD vocabulary generation"
            echo "JSONLD_VOCABULARIES_GENERATED=false" >> $GITHUB_ENV
          fi

      - name: Generate Logical Model JSON Schemas (after IG publisher)
        if: env.ENABLE_LOGICAL_MODEL_SCHEMAS == 'true' && env.LOGICAL_MODEL_SCHEMAS_GENERATED != 'true'
        run: |
          echo "Generating Logical Model schemas from StructureDefinition JSON files after IG publisher..."
          
          # Check if there are StructureDefinition files to process
          if find ./output -name "StructureDefinition-*.json" -print -quit | grep -q .; then
            echo "Found StructureDefinition files to process"
            # Check if script exists locally first
            if [ -f "./input/scripts/generate_logical_model_schemas.py" ]; then
              echo "Using local Logical Model schema generator..."
              python3 input/scripts/generate_logical_model_schemas.py output output
              echo "✅ Logical Model schemas generated successfully"
              echo "LOGICAL_MODEL_SCHEMAS_GENERATED=true" >> $GITHUB_ENV
            else
              echo "Downloading Logical Model schema generator..."
              mkdir -p ./input/scripts
              curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_logical_model_schemas.py \
                -o ./input/scripts/generate_logical_model_schemas.py
              if [ -f "./input/scripts/generate_logical_model_schemas.py" ]; then
                python3 input/scripts/generate_logical_model_schemas.py output output
                echo "✅ Logical Model schemas generated successfully"
                echo "LOGICAL_MODEL_SCHEMAS_GENERATED=true" >> $GITHUB_ENV
              else
                echo "⚠️  Failed to download Logical Model schema generator, skipping"
                echo "LOGICAL_MODEL_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
              fi
            fi
          else
            echo "⚠️  No StructureDefinition JSON files found, skipping Logical Model schema generation"
            echo "LOGICAL_MODEL_SCHEMAS_GENERATED=false" >> $GITHUB_ENV
          fi

      - name: Generate DAK API Documentation (post-process HTML)  
        if: env.ENABLE_DAK_API_HUB == 'true'
        run: |
          echo "Post-processing DAK API documentation into generated HTML files..."
          
          # Check if there are schemas to document
          HAVE_SCHEMAS=false
          if [ -f "./output/ValueSets.schema.json" ] || [ -f "./output/LogicalModels.schema.json" ] || \
             find ./output -name "ValueSet-*.schema.json" -print -quit | grep -q . || \
             find ./output -name "*Model*.schema.json" -print -quit | grep -q . || \
             find ./output -name "ValueSet-*.jsonld" -print -quit | grep -q . || \
             [ -d "./input/images/openapi" ] && find ./input/images/openapi -name "*.json" -o -name "*.yaml" -o -name "*.yml" | grep -q .; then
            HAVE_SCHEMAS=true
            echo "Found schemas, JSON-LD vocabularies, or OpenAPI files to document"
          fi
          
          # Set fallback values for schema generation flags if not set
          VALUESET_SCHEMAS_GENERATED="${VALUESET_SCHEMAS_GENERATED:-false}"
          LOGICAL_MODEL_SCHEMAS_GENERATED="${LOGICAL_MODEL_SCHEMAS_GENERATED:-false}"
          JSONLD_VOCABULARIES_GENERATED="${JSONLD_VOCABULARIES_GENERATED:-false}"
          
          if [ "$HAVE_SCHEMAS" = true ] || [ "$VALUESET_SCHEMAS_GENERATED" = true ] || [ "$LOGICAL_MODEL_SCHEMAS_GENERATED" = true ] || [ "$JSONLD_VOCABULARIES_GENERATED" = true ]; then
            # Install required Python dependencies
            # Note: beautifulsoup4 is required for HTML processing
            # pyyaml was removed as dependency in latest version but kept for backward compatibility
            pip install pyyaml beautifulsoup4
            
            # Check if script exists locally first
            if [ -f "./input/scripts/generate_dak_api_hub.py" ]; then
              echo "Using local DAK API hub generator..."
              python3 input/scripts/generate_dak_api_hub.py output output
              echo "✅ DAK API documentation post-processed successfully"
            else
              echo "Downloading DAK API hub generator..."
              mkdir -p ./input/scripts
              curl -sSL https://raw.githubusercontent.com/WorldHealthOrganization/smart-base/main/input/scripts/generate_dak_api_hub.py \
                -o ./input/scripts/generate_dak_api_hub.py
              if [ -f "./input/scripts/generate_dak_api_hub.py" ]; then
                python3 input/scripts/generate_dak_api_hub.py output output
                echo "✅ DAK API documentation post-processed successfully"
              else
                echo "⚠️  Failed to download DAK API hub generator, skipping"
              fi
            fi
          else
            echo "⚠️  No schemas, JSON-LD vocabularies, or OpenAPI files found to document. Run schema generation steps first or ensure schemas are available."
            echo "     - Enable 'Generate ValueSet JSON Schemas' to generate ValueSet documentation"
            echo "     - Enable 'Generate Logical Model JSON Schemas' to generate Logical Model documentation"  
            echo "     - Enable 'Generate JSON-LD Vocabularies' to generate JSON-LD vocabulary documentation"
            echo "     - Or place OpenAPI/Swagger files in input/images/openapi/ directory"
            echo "Skipping DAK API documentation generation."
          fi
     
      # Additional step to upload qa.json as an artifact
      - name: Upload qa.json artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: qa-json-artifact
          path: ./output/qa.json  # Adjust the path based on where qa.json is located

      - name: Delete files >100MB before deployment
        run: |
          echo "Removing files over 100 MB from ./output..."
          find ./output -type f -size +100M -print -delete

      - name: Deploy candidate
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'false'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ./output # The folder the action should deploy.
          commit-message: Deploy candidate branch
          target-folder: branches/${{ env.SANITIZED_BRANCH_NAME }}
          single-commit: true
          clean: false 

      - name: Deploy main
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        if: env.IS_DEFAULT_BRANCH == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages # The branch the action should deploy to.
          folder: ./output # The folder the action should deploy.
          commit-message: Deploy main branch
          single-commit: true
          clean-exclude: |
            branches
            sitepreview

      - name: Comment on PR - Build Complete
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const deployUrl = process.env.DEPLOY_URL;
            const isDefault = process.env.IS_DEFAULT_BRANCH === 'true';
            const jobStatus = '${{ job.status }}';
            
            let statusIcon, statusText, statusColor;
            if (jobStatus === 'success') {
              statusIcon = '✅';
              statusText = 'Successful';
              statusColor = '🟢';
            } else if (jobStatus === 'failure') {
              statusIcon = '❌';
              statusText = 'Failed';
              statusColor = '🔴';
            } else if (jobStatus === 'cancelled') {
              statusIcon = '⏹️';
              statusText = 'Cancelled';
              statusColor = '🟡';
            } else {
              statusIcon = '⚠️';
              statusText = 'Completed with issues';
              statusColor = '🟡';
            }
            
            const message = `${statusIcon} **Build ${statusText}** for branch \`${branchName}\`
            
            ${jobStatus === 'success' ? 
              `${statusColor} **Deployment successful!** Site is available at: ${deployUrl}` :
              `${statusColor} **Deployment ${statusText.toLowerCase()}** - please check the workflow logs for details.`
            }
            
            🔗 [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
